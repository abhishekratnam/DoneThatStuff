{"version":3,"file":"figma-squircle.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["export interface FigmaSquircleParams {\n  cornerRadius?: number\n  topLeftCornerRadius?: number\n  topRightCornerRadius?: number\n  bottomRightCornerRadius?: number\n  bottomLeftCornerRadius?: number\n  cornerSmoothing: number\n  width: number\n  height: number\n}\n\nexport function getSvgPath({\n  cornerRadius = 0,\n  topLeftCornerRadius,\n  topRightCornerRadius,\n  bottomRightCornerRadius,\n  bottomLeftCornerRadius,\n  cornerSmoothing,\n  width,\n  height,\n}: FigmaSquircleParams) {\n  const defaultPathParams = getPathParamsForCorner({\n    width,\n    height,\n    cornerRadius,\n    cornerSmoothing,\n  })\n\n  // Most of the time, all corners will have the same radius\n  // Instead of calculating path params for all 4 corners,\n  // we want to use the default path params whenever possible\n  const topLeftPathPathParams =\n    topLeftCornerRadius !== undefined\n      ? getPathParamsForCorner({\n          width,\n          height,\n          cornerRadius: topLeftCornerRadius,\n          cornerSmoothing,\n        })\n      : defaultPathParams\n\n  const topRightPathPathParams =\n    topRightCornerRadius !== undefined\n      ? getPathParamsForCorner({\n          width,\n          height,\n          cornerRadius: topRightCornerRadius,\n          cornerSmoothing,\n        })\n      : defaultPathParams\n\n  const bottomRightPathPathParams =\n    bottomRightCornerRadius !== undefined\n      ? getPathParamsForCorner({\n          width,\n          height,\n          cornerRadius: bottomRightCornerRadius,\n          cornerSmoothing,\n        })\n      : defaultPathParams\n\n  const bottomLeftPathPathParams =\n    bottomLeftCornerRadius !== undefined\n      ? getPathParamsForCorner({\n          width,\n          height,\n          cornerRadius: bottomLeftCornerRadius,\n          cornerSmoothing,\n        })\n      : defaultPathParams\n\n  return `\n    ${drawTopRightPath(topRightPathPathParams)}\n    ${drawBottomRightPath(bottomRightPathPathParams)}\n    ${drawBottomLeftPath(bottomLeftPathPathParams)}\n    ${drawTopLeftPath(topLeftPathPathParams)}\n  `\n    .replace(/[\\t\\s\\n]+/g, ' ')\n    .trim()\n}\n\nfunction drawTopRightPath({\n  cornerRadius,\n  width,\n  height,\n  a,\n  b,\n  c,\n  d,\n  p,\n  circularSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    M ${Math.max(width / 2, width - p)} 0\n    C ${width - (p - a)} 0 ${width - (p - a - b)} 0 ${width -\n      (p - a - b - c)} ${d}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 ${circularSectionLength} ${circularSectionLength}\n    C ${width} ${p - a - b}\n        ${width} ${p - a}\n        ${width} ${Math.min(height / 2, p)}`\n  } else {\n    return `M ${width / 2} 0\n    L ${width} ${0}\n    L ${width} ${height / 2}`\n  }\n}\n\nfunction drawBottomRightPath({\n  cornerRadius,\n  width,\n  height,\n  a,\n  b,\n  c,\n  d,\n  p,\n  circularSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    L ${width} ${Math.max(height / 2, height - p)}\n    C ${width} ${height - (p - a)}\n      ${width} ${height - (p - a - b)}\n      ${width - d} ${height - (p - a - b - c)}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 -${circularSectionLength} ${circularSectionLength}\n    C ${width - (p - a - b)} ${height}\n      ${width - (p - a)} ${height}\n      ${Math.max(width / 2, width - p)} ${height}`\n  } else {\n    return `L ${width} ${height}\n    L ${width / 2} ${height}`\n  }\n}\n\nfunction drawBottomLeftPath({\n  cornerRadius,\n  width,\n  height,\n  a,\n  b,\n  c,\n  d,\n  p,\n  circularSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    L ${Math.min(width / 2, p)} ${height}\n    C ${p - a} ${height}\n      ${p - a - b} ${height}\n      ${p - a - b - c} ${height - d}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 -${circularSectionLength} -${circularSectionLength}\n    C 0 ${height - (p - a - b)}\n      0 ${height - (p - a)}\n      0 ${Math.max(height / 2, height - p)}`\n  } else {\n    return `\n    L ${0} ${height}\n    L ${0} ${height / 2}`\n  }\n}\n\nfunction drawTopLeftPath({\n  cornerRadius,\n  width,\n  height,\n  a,\n  b,\n  c,\n  d,\n  p,\n  circularSectionLength,\n}: CornerPathParams) {\n  if (cornerRadius) {\n    return `\n    L 0 ${Math.min(height / 2, p)}\n    C 0 ${p - a}\n      0 ${p - a - b}\n      ${d} ${p - a - b - c}\n    a ${cornerRadius} ${cornerRadius} 0 0 1 ${circularSectionLength} -${circularSectionLength}\n    C ${p - a - b} 0\n      ${p - a} 0\n      ${+Math.min(width / 2, p)} 0\n    Z`\n  } else {\n    return `L ${0} ${0}\n    Z`\n  }\n}\n\ninterface CornerParams {\n  cornerRadius: number\n  cornerSmoothing: number\n  width: number\n  height: number\n}\n\ninterface CornerPathParams {\n  a: number\n  b: number\n  c: number\n  d: number\n  p: number\n  cornerRadius: number\n  circularSectionLength: number\n  width: number\n  height: number\n}\n\nfunction getPathParamsForCorner({\n  cornerRadius,\n  cornerSmoothing,\n  width,\n  height,\n}: CornerParams): CornerPathParams {\n  const maxRadius = Math.min(width, height) / 2\n  cornerRadius = Math.min(cornerRadius, maxRadius)\n\n  // The article from figma's blog\n  // https://www.figma.com/blog/desperately-seeking-squircles/\n  //\n  // The original code\n  // https://github.com/MartinRGB/Figma_Squircles_Approximation/blob/bf29714aab58c54329f3ca130ffa16d39a2ff08c/js/rounded-corners.js#L64\n\n  // 12.2 from the article\n  const p = Math.min((1 + cornerSmoothing) * cornerRadius, maxRadius)\n\n  let angleAlpha: number, angleBeta: number\n\n  if (cornerRadius <= maxRadius / 2) {\n    angleBeta = 90 * (1 - cornerSmoothing)\n    angleAlpha = 45 * cornerSmoothing\n  } else {\n    // When `cornerRadius` is larger and `maxRadius / 2`,\n    // these angles also depend on `cornerRadius` and `maxRadius / 2`\n    //\n    // I did a few tests in Figma and this code generated similar but not identical results\n    // `diffRatio` was called `change_percentage` in the orignal code\n    const diffRatio = (cornerRadius - maxRadius / 2) / (maxRadius / 2)\n\n    angleBeta = 90 * (1 - cornerSmoothing * (1 - diffRatio))\n    angleAlpha = 45 * cornerSmoothing * (1 - diffRatio)\n  }\n\n  const angleTheta = (90 - angleBeta) / 2\n\n  // This was called `h_longest` in the original code\n  // In the article this is the distance between 2 control points: P3 and P4\n  const p3ToP4Distance = cornerRadius * Math.tan(toRadians(angleTheta / 2))\n\n  // This was called `l` in the original code\n  const circularSectionLength =\n    Math.sin(toRadians(angleBeta / 2)) * cornerRadius * Math.sqrt(2)\n\n  // a, b, c and d are from 11.1 in the article\n  const c = p3ToP4Distance * Math.cos(toRadians(angleAlpha))\n  const d = c * Math.tan(toRadians(angleAlpha))\n  const b = (p - circularSectionLength - c - d) / 3\n  const a = 2 * b\n\n  return {\n    a,\n    b,\n    c,\n    d,\n    p,\n    width,\n    height,\n    circularSectionLength,\n    cornerRadius,\n  }\n}\n\nfunction toRadians(degrees: number) {\n  return (degrees * Math.PI) / 180\n}\n"],"names":["getPathParamsForCorner","cornerRadius","cornerSmoothing","width","height","maxRadius","Math","min","angleAlpha","angleBeta","p","diffRatio","p3ToP4Distance","tan","toRadians","circularSectionLength","sin","sqrt","c","cos","d","b","a","degrees","PI","topLeftCornerRadius","topRightCornerRadius","bottomRightCornerRadius","bottomLeftCornerRadius","defaultPathParams","topLeftPathPathParams","undefined","topRightPathPathParams","bottomRightPathPathParams","bottomLeftPathPathParams","max","drawTopRightPath","drawBottomRightPath","drawBottomLeftPath","drawTopLeftPath","replace","trim"],"mappings":"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"}